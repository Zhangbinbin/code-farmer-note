<chapter xml:id="chapter1" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="zh-CN"
  xmlns:xlink='http://www.w3.org/1999/xlink'>
  <title>搭建运行环境</title>
  <para>既然我们要自己动手制作一个路由器，那么我们就需要一个开发/生产环境了。由于我们的路由器是运行在虚拟机中的，所以我们并不需要电线啊，电路板或者开发板之类的东西，况且他们还要耗费我们的银子。</para>
  <section>
    <title>安装Ubuntu</title>
    <para><emphasis>Ubuntu</emphasis>是<emphasis>linux</emphasis>中用户体验相当好的一款<emphasis>linux</emphasis>发行版本，至于说怎么好，这个就因人而异了，<quote>萝卜青菜，各有所爱！</quote>我使用<emphasis>Ubuntu</emphasis>有好多年了，用着很稳定也很方便，所以也很少尝试其他的发行版本了，所以这里就以<emphasis>Ubuntu</emphasis>作为运行系统，然而我却十分不适应<emphasis>Ubuntu</emphasis>的<emphasis>Unity</emphasis>界面，于是我们在来一个折中--<emphasis>Xubuntu</emphasis>，他是<emphasis>Ubuntu</emphasis>的一个衍生版本，本身并没有太大的区别，只是用户界面使用的是<emphasis>Xfce</emphasis>，相对来说界面更传统，资源占用率更小一些。当然这只是我个人的使用习惯而已，好了，镜像下载看这里：</para>
      <itemizedlist>
        <listitem>
          <ulink url="http://xubuntu.org/getxubuntu/"></ulink>
        </listitem>
      </itemizedlist>
      <para>这里我们选择<quote>Mirror downloads</quote>，<quote>Torrent downloads</quote>也不错，然后选择一个镜像服务器即可，这里我选择<quote>United States</quote>，根据自己的需要选择合适的版本，这里我们选择：</para>
      <itemizedlist>
        <listitem>
        <ulink url="http://mirror.anl.gov/pub/ubuntu-iso/CDs-Xubuntu/12.10/release/xubuntu-12.10-desktop-amd64.iso"></ulink>
        </listitem>
      </itemizedlist>
      <para>由于目前<emphasis>Xubuntu</emphasis>还没有国内的镜像，所以下载会比较慢，所以请耐心等候吧。</para>
    <para>好了，下载OK，接下来我们开始安装系统了，这里有三种方式：</para>
    <itemizedlist>
      <listitem>
        光盘安装
      </listitem>
      <listitem>
        U盘安装
      </listitem>
      <listitem>
        Wubi
      </listitem>
    </itemizedlist>
    <para>上述3种安装方法网上有很多资源，大家可以谷歌一下，这里就不多介绍了，其中<emphasis>Wubi</emphasis>的方法比较独特，那就是他是把<emphasis>Ubuntu</emphasis>当作一个应用程序一样安装到<emphasis>Windows</emphasis>系统中的，好处是不用格式化硬盘了，只需要占用<emphasis>Windows</emphasis>的分区空间就行了，不过从效率上来说没有前两种方法好，如果你只是尝试一下的话，推荐使用<emphasis>Wubi</emphasis>。如果还嫌麻烦的话，那么就可以考虑使用虚拟机了。</para>
    <para>系统安装完，我们还需要添加一些工具到系统中：</para>
<prompt>liunx@ubuntu:~$ </prompt><userinput>sudo apt-get install build-essential</userinput>
<para>这里我们将安装基本的编译工具集合，包括编译器之类的工具，当然仅仅这样还不够，我们接下来还要安装一些相关的<emphasis>dev</emphasis>文件，这个我们会一步一步地添加的。</para>
  </section>
  <section>
    <title>编译vde</title>
    <para>
      ubuntu软件包里似乎对<emphasis>vde</emphasis>不是特别重视，更新的不是很及时，所以我们自己动手编译<emphasis>vde</emphasis>，首先我们通过<emphasis>svn</emphasis>来获取<emphasis>vde</emphasis>的源代码： 
<screen>
<prompt>liunx@ubuntu:~/Work/Emulator/work$ </prompt><userinput>svn co https://vde.svn.sourceforge.net/svnroot/vde/
trunk/vde-2 vde_svn</userinput>
</screen>
接下来配置编译<emphasis>vde</emphasis>了：
<screen>
<prompt>liunx@ubuntu:~/Work/Emulator/work$ </prompt><userinput>cd vde_svn; autoreconf -fi; ./configure 
--enable-experimental; make; sudo make install</userinput>
</screen>
<emphasis>vde</emphasis>支持<emphasis>python</emphasis>接口，虽然我还不知道这个怎么用，但是还是支持为好，这里我们就要下载python的开发文件了：
<screen>
<prompt>liunx@ubuntu:~/Work/Emulator/work$ </prompt><userinput>sudo apt-get install python-all-dev</userinput>
</screen>
如果一切顺利的话，那么<emphasis>vde</emphasis>相关文件就会安装到<filename id="directory">/usr/local/</filename>这样的好处是不会和系统原装的文件产生冲突，也方便管理了。
    </para>
  </section>
  <section>
    <title>安装qemu</title>
    <para> ubuntu自带的qemu不支持<emphasis>vde</emphasis>选项，所以我们需要自己编译<emphasis>qemu</emphasis>。</para>
      <screen>
<prompt>liunx@ubuntu:~/Work/DocBook/Work/code-farmer-note$ </prompt><userinput>/usr/bin/qemu-system-i386  --help
 |grep vde</userinput>
<prompt>liunx@ubuntu:~/Work/DocBook/Work/code-farmer-note$ </prompt>
<prompt>liunx@ubuntu:~/Work/DocBook/Work/code-farmer-note$ </prompt><userinput>/usr/local/bin/qemu-system-i386  --help
 |grep vde</userinput>
-net vde[,vlan=n][,name=str][,sock=socketpath][,port=n][,group=groupname][,mode=octalmode]
                connect the vlan 'n' to port 'n' of a vde switch running
-netdev [user|tap|bridge|vde|socket],id=str[,option][,option][,...]
      </screen>
      <para>从结果中可以看出ubuntu自带的qemu没有编译vde功能，这个困扰我好长时间，我一直奇怪为啥我按vde WiKi上的tutorial怎么都看不到效果，原来是这个原因！真让人郁闷。自己动手编译也不错啊，qemu1.2版本都支持<emphasis>or32</emphasis>了，太好了，不过在编译<emphasis>qemu</emphasis>前，一些开发库必须先整上，
      <screen>
<prompt>liunx@ubuntu:~/Work/Emulator/src/qemu$ </prompt><userinput>sudo apt-get install libsdl1.2-dev libcap-ng-dev</userinput>
<prompt>liunx@ubuntu:~/Work/Emulator/src/qemu$ </prompt><userinput>./configure</userinput>
Install prefix    /usr/local
BIOS directory    /usr/local/share/qemu
binary directory  /usr/local/bin
library directory /usr/local/lib
libexec directory /usr/local/libexec
include directory /usr/local/include
config directory  /usr/local/etc
local state directory   /usr/local/var
Manual directory  /usr/local/share/man
ELF interp prefix /usr/gnemul/qemu-%M
Source path       /home/liunx/Work/Emulator/src/qemu
C compiler        cc
Host C compiler   cc
Objective-C compiler cc
CFLAGS            -O2 -D_FORTIFY_SOURCE=2 -g
QEMU_CFLAGS       -Werror -fPIE -DPIE -m64 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 
-D_LARGEFILE_SOURCE -Wstrict-prototypes -Wredundant-decls -Wall -Wundef 
-Wwrite-strings -Wmissing-prototypes -fno-strict-aliasing  -fstack-protector-all 
-Wendif-labels -Wmissing-include-dirs -Wempty-body -Wnested-externs -Wformat-security 
-Wformat-y2k -Winit-self -Wignored-qualifiers -Wold-style-declaration -Wold-style-definition 
-Wtype-limits -I/usr/include/p11-kit-1  -I/usr/include/libpng12   -I/usr/include/pixman-1
LDFLAGS           -Wl,--warn-common -Wl,-z,relro -Wl,-z,now -pie -m64 -g
make              make
install           install
python            python
smbd              /usr/sbin/smbd
host CPU          x86_64
host big endian   no
target list       i386-softmmu x86_64-softmmu alpha-softmmu arm-softmmu cris-softmmu 
lm32-softmmu m68k-softmmu microblaze-softmmu microblazeel-softmmu mips-softmmu 
mipsel-softmmu mips64-softmmu mips64el-softmmu or32-softmmu ppc-softmmu ppcemb-softmmu 
ppc64-softmmu sh4-softmmu sh4eb-softmmu sparc-softmmu sparc64-softmmu s390x-softmmu 
xtensa-softmmu xtensaeb-softmmu unicore32-softmmu i386-linux-user x86_64-linux-user 
alpha-linux-user arm-linux-user armeb-linux-user cris-linux-user m68k-linux-user 
microblaze-linux-user microblazeel-linux-user mips-linux-user mipsel-linux-user 
or32-linux-user ppc-linux-user ppc64-linux-user ppc64abi32-linux-user sh4-linux-user 
sh4eb-linux-user sparc-linux-user sparc64-linux-user sparc32plus-linux-user 
unicore32-linux-user s390x-linux-user
tcg debug enabled no
gprof enabled     no
sparse enabled    no
strip binaries    yes
profiler          no
static build      no
-Werror enabled   yes
pixman            system
SDL support       yes
curses support    yes
curl support      no
mingw32 support   no
Audio drivers     oss
Extra audio cards ac97 es1370 sb16 hda
Block whitelist
Mixer emulation   no
VirtFS support    yes
VNC support       yes
VNC TLS support   yes
VNC SASL support  no
VNC JPEG support  yes
VNC PNG support   yes
xen support       no
brlapi support    no
bluez  support    no
Documentation     yes
NPTL support      yes
GUEST_BASE        yes
PIE               yes
vde support       yes
Linux AIO support no
ATTR/XATTR support yes
Install blobs     yes
KVM support       yes
TCG interpreter   no
fdt support       no
preadv support    yes
fdatasync         yes
madvise           yes
posix_madvise     yes
sigev_thread_id   yes
uuid support      yes
libcap-ng support yes
vhost-net support yes
Trace backend     nop
Trace output file trace-&lt;pid&gt;
spice support     no (/)
rbd support       no
xfsctl support    no
nss used          no
usb net redir     no
OpenGL support    yes
libiscsi support  yes
build guest agent yes
seccomp support   no
coroutine backend ucontext
GlusterFS support no
virtio-blk-data-plane no
      </screen>
      这里我们要关注几个配置选项，<emphasis>kvm enable</emphasis>，<emphasis>SDL</emphasis>和<emphasis>vde</emphasis>，这几个配置一定齐全，这样才行，如果不是<emphasis>yes</emphasis>，话，那就下载他们的开发库和头文件，vde的话如前文所述，已经成功安装了，就不必多虑了。然后<command>make &amp;&amp; make install</command>，经过漫长的编译（如果不幸你的电脑特别挫的话，其实也不必自责，我的6核大电脑也要忙活一段时间呢），然后自己编译的<emphasis>qemu</emphasis>就诞生了！注意安装完成了别忘了看一下vde功能是否编译进去了，不然就又要返工了！
    </para>
    <para>如果你的电脑比较古老的话，可能不支持虚拟化技术，那么我们就无法享受到<emphasis>kvm</emphasis>带来的性能提升了，不过还好，我们的虚拟机系统很小，负载不会很大的，所以这个影响还不大，只是电脑内存稍微大一些就好。</para>
  </section>
  <!--
  <section>
    <title>安装Virtualbricks</title>
    <para>
      在开始前，我要扯一下蛋了，这个程序也是我无意间找到的，当时我是想用<emphasis>Qemulator</emphasis>来管理虚拟机的，但是发现在ubuntu下运行不稳定了，总是卡住，没办法，我决定自己编译源码的，但是发现这个项目没有了，取而代之的就是这个<emphasis>Virtualbricks</emphasis>项目了，他不仅可以管理虚拟机，而且可以可以配置<emphasis>vde</emphasis>建立网络设备互联的拓扑图，并且是真是可用的，就是通过vde的虚拟连线、路由、交换机等链接各个虚拟机网卡接口，这样就可以在单台主机上模拟一个完整的网络系统了，好处就是我们可以很方便的做实验了，而不需要昂贵的硬件投入了，真是棒极了！
    </para>
    <para>
      闲言少叙，我们开始吧。<ulink url="https://launchpad.net/virtualbrick/trunk">Virtualbricks</ulink>的源码安置在<ulink url="https://launchpad.net">launchpad</ulink>上，我们可以通过<emphasis>bzr</emphasis>来获取源码，终端里输入<command>bzr branch lp:virtualbrick</command>，如果ubuntu提示没有安装，那么就按照提示安装即可。OK，下面开始编译了，<command>cd virtualbrck; sudo ./install.sh</command>，如果一切顺利的话，我们的安装就到此结束了！
    </para>
  </section>
  <section>
    <title>尾声</title>
    <para>
      好了，我们的第一章就要结束了，可是说了这么多，还是不知道都干了点啥？那么就要有图有真相了：
      <imageobject>
        <imagedata align="right" width="6in" format="PNG"
          fileref="../images/virtualbrick.png"/>
      </imageobject>
      <imageobject>
        <imagedata align="right" width="6in" format="PNG"
          fileref="../images/virtualbrick2.png"/>
      </imageobject>
      哈！效果还是蛮酷的是不是？
    </para>
  </section>
  -->
</chapter>
