<chapter xml:id="chapter3" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="zh-CN"
  xmlns:xlink='http://www.w3.org/1999/xlink'>
  <title>搭建嵌入式系统</title>
  <para>前面我们准备好了开发环境，现在是演职人员登场的时候了。这里是基于<emphasis>linux</emphasis>的嵌入式系统。</para>
  <section>
    <title>运行OpenWrt</title>
    <para>
      首先登场的是<emphasis>OpenWrt</emphasis>，这是一款很出名的开源路由器系统，当然是基于<emphasis>linux</emphasis>的了，那么<emphasis>OpenWrt</emphasis>已经就是一个路由系统了，作为嵌入式系统，他的体积很小，启动速度很快，加上其支持<emphasis>X86</emphasis>平台，很符合我们的要求。而且他包含了大量的开源软件，使得我们不必满世界的移植程序了，Perfact！
    </para>
    <para>
      获得<emphasis>OpenWrt</emphasis>系统的方式有以下几种：
      <orderedlist>
        <listitem>
          从源码进行编译
        </listitem>
        <listitem>
          获取编译好的二进制镜像系统
        </listitem>
      </orderedlist>
      编译<emphasis>OpenWrt</emphasis>也不难，可是时间上实在是太长了，如果你的电脑不够Power的话，那么还是省省吧，还好，<emphasis>OpenWrt</emphasis>为我们编译好了各种平台上镜像版本，同时还包括软件仓库，这样既节约了时间，又方便新手入门，只是一举多得。
    </para>
    <para>
      好，那么去哪下载官方的二进制镜像呢，看这里<ulink url="http://downloads.openwrt.org/"></ulink>。
    <imageobject>
      <imagedata align="left" width="6in" format="PNG"
        fileref="../images/openwrt-download.png"/>
    </imageobject>
    这么多选择，该选哪一个呢？这里我们关注有一下几个版本入口：
    <orderedlist>
      <listitem>backfire</listitem>
      <listitem>kamikaze</listitem>
      <listitem>snapshots</listitem>
      <listitem>attitude_adjustment</listitem>
    </orderedlist>
    <emphasis>backfire</emphasis>和<emphasis>kamikaze</emphasis>属于两个稳定的分支，正常使用没有什么问题，就是版本比较老了，相应的软件包也比较老，<emphasis>attitude_adjustment</emphasis>则是最近的稳定版本，这里我们可以使用他们的<emphasis>x86</emphasis>版本，但是这里我们选择<emphasis>snapshots</emphasis>版本，虽然快照版本相对来说不是很稳定，但是代码更新很快，内核版本，软件包也更新，其实快照版本就是用来给大家测试用的，以便获取错误信息的反馈，增强系统的稳定性，所以，本着参与的目的，我们选择<emphasis>snapshots</emphasis>版本，如果有问题的话，我们还可以反馈一些内容了。<emphasis>但是，需要注意的是，由于这是个快照版本，内核模块重新编译的话，是使得安装内核模块时失败</emphasis>，还好整个系统不是很大，我们只要及时跟新镜像就是了，而且也用不到所有的软件包的，所以够用了。 </para>
      <para>这里我们选择<emphasis>attitude_adjustment</emphasis>版本吧，可以避免一些不必要的麻烦。</para>
      <para>接下来，我们进入<emphasis>attitude_adjustment</emphasis>目录，下载镜像。</para>
    <orderedlist>
      <listitem>
        <ulink url="http://downloads.openwrt.org/attitude_adjustment/12.09-rc1/x86/generic/openwrt-x86-generic-rootfs-ext4.img.gz"></ulink></listitem>
      <listitem><ulink url="http://downloads.openwrt.org/attitude_adjustment/12.09-rc1/x86/generic/openwrt-x86-generic-vmlinuz"></ulink></listitem>
      <listitem><ulink url="http://downloads.openwrt.org/attitude_adjustment/12.09-rc1/x86/generic/openwrt-x86-generic-combined-ext4.img.gz"></ulink></listitem>
    </orderedlist>
    <para><emphasis>openwrt-x86-generic-combined-ext4.img.gz</emphasis>包括了引导程序、内核和跟文件系统，优点是简单易用，缺点是无法挂载，所以导入配置文件的时候有些麻烦了，但是也没关系的，如果我们安装了<emphasis>openWrt</emphasis>自带的用户界面的话，可以导入/导出配置文件的，但是目前来说作用还不是很大，反而增加了复杂性，所以我们选择后面两个镜像来配合使用，前者只包含了根文件系统，后者是内核。 </para>
    <para>
      好了，别忘了解压<emphasis>zip</emphasis>文件。下面，见证奇迹的时刻到了，前面做了那么多艰苦卓绝的工作，该是出成果的时候了！先看一下我们的文件布局：
      <screen>
<prompt>liunx@liunx-G41MT-S2PT:~/Work/OpenWrt/work/openwrt$ </prompt><userinput>tree</userinput>
.
├── boot.sh
├── images
│   ├── openwrt-x86-generic-combined-ext4.img
│   ├── openwrt-x86-generic-rootfs-ext4.img
│   └── openwrt-x86-generic-vmlinuz
├── qemu-ifdown
├── qemu-ifup

2 directories, 7 files
      </screen>
      再看我们的运行脚本：
      <screen>
<prompt>liunx@liunx-G41MT-S2PT:~/Work/OpenWrt/work/openwrt$ </prompt><userinput>ls</userinput>
boot.sh  images  qemu-ifdown  qemu-ifup
<prompt>liunx@liunx-G41MT-S2PT:~/Work/OpenWrt/work/openwrt$ </prompt><userinput>cat qemu-ifdown</userinput>
#!/bin/bash -

bridge=virbr0
brctl delif $bridge $1 || true
ifconfig $1 down
liunx@liunx-G41MT-S2PT:~/Work/OpenWrt/work/openwrt$ cat qemu-ifup
#!/bin/bash -

bridge=virbr0
ifconfig $1 0.0.0.0 promisc up
brctl addif $bridge $1
<prompt>liunx@liunx-G41MT-S2PT:~/Work/OpenWrt/work/openwrt$ </prompt><userinput>cat boot.sh</userinput>
#!/bin/bash -

set -o nounset                              # Treat unset variables as an error

/usr/local/bin/qemu-system-i386 \
        -m 64M \
        -kernel images/openwrt-x86-generic-vmlinuz \
        -hda images/openwrt-x86-generic-rootfs-ext4.img \
        -append "root=/dev/sda console=ttyS0" \
        -enable-kvm \
        -nographic \
        -usb \
        -net nic,vlan=3,model=ne2k_pci,macaddr="12:34:56:78:9a:00" \
        -net tap,vlan=3,ifname=openwrt0,script=qemu-ifup,downscript=qemu-ifdown

      </screen>
      看好了，大家！这里我们需要五个文件：
    <orderedlist>
      <listitem>boot.sh</listitem>
      <listitem>qemu-ifup</listitem>
      <listitem>qemu-ifdown</listitem>
      <listitem>images/openwrt-x86-generic-rootfs-ext4.img</listitem>
      <listitem>images/openwrt-x86-generic-vmlinuz</listitem>
    </orderedlist>
    你都找到了吗？
    </para>
    <para>
    最后，激动人心的时刻到了，运行！
    <screen>
<prompt>liunx@liunx-G41MT-S2PT:~/Work/OpenWrt/work/openwrt$ </prompt><userinput>sudo ./boot.sh</userinput>
    </screen>
    <imageobject>
      <imagedata align="left" width="6in" format="PNG"
        fileref="../images/openwrt-cli.png"/>
    </imageobject>
    </para>
  </section>
  <section>
    <title>运行buildroot</title>
    <para>
      <emphasis>buildroot</emphasis>可是<emphasis>openwrt</emphasis>的老前辈了，因为<emphasis>openwrt</emphasis>项目就是在<emphasis>buildroot</emphasis>的基础上构建的，不免让人对<emphasis>buildroot</emphasis>里的大牛们新生敬意。不过运行<emphasis>buildroot</emphasis>就没有那么好的“现成饭”可以吃了，我们不得不响应伟大领袖的号召--“自己动手，丰衣足食”。大家一看便知，这是让我们自己编译<emphasis>buildroot</emphasis>了，还好，<emphasis>buildroot</emphasis>的配置很简单，还有现成的模板可供我们参考，编译起来也比<emphasis>openwrt</emphasis>省时省力，而且还有文档可供参考，我们不必“摸着石头过河”了。
    </para>
    <para>
      <emphasis>第一步</emphasis>下载源代码，解决依赖关系。进入这里<ulink url="http://buildroot.uclibc.org/downloads/"></ulink>下载最近的一个稳定版本，<emphasis>buildroot</emphasis>是按日期发布的，所以很容易找到最新的版本，这里我们下载<ulink url="http://buildroot.uclibc.org/downloads/buildroot-2012.11.tar.bz2"></ulink>接下来解压：
      <screen>
<prompt>liunx@ubuntu:~/Work/Buildroot/dl$ </prompt><userinput>tar -xf buildroot-2012.11.tar.bz2 -C ../work/</userinput>
      </screen>
      由于<emphasis>buildroot</emphasis>本身只是<emphasis>Makefile</emphasis>和<emphasis>patch</emphasis>的集合，本身并没有含有软件的源代码，所以需要下载和编译源代码，因此我们需要满足这些条件才行，<emphasis>buildroot</emphasis>所依赖的软件可以参考这里<ulink url="http://buildroot.uclibc.org/downloads/manual/manual.html#requirement"></ulink>所以请务必确保满足这些以来关系。
    </para>
    <para>
      <emphasis>第二步</emphasis>配置。<emphasis>buildroot</emphasis>支持多种系统架构，并且包含很多一配置好的模板，其中就有支持<emphasis>x86</emphasis>的模板，我们只需在他的基础上做一些调整即可：
      <screen>
<prompt>liunx@ubuntu:~/Work/Buildroot/work/buildroot-2012.11$ </prompt><userinput>make help</userinput>
Cleaning:
  clean                  - delete all files created by build
  distclean              - delete all non-source files (including .config)

Build:
  all                    - make world
  &lt;package&gt;-rebuild      - force recompile &lt;package&gt;
  &lt;package&gt;-reconfigure  - force reconfigure &lt;package&gt;

Configuration:
  menuconfig             - interactive curses-based configurator
  nconfig                - interactive ncurses-based configurator
  xconfig                - interactive Qt-based configurator
  gconfig                - interactive GTK-based configurator
  oldconfig              - resolve any unresolved symbols in .config
  randconfig             - New config with random answer to all options
  defconfig              - New config with default answer to all options
                             BR2_DEFCONFIG, if set, is used as input
  savedefconfig          - Save current config as ./defconfig (minimal config)
  allyesconfig           - New config where all options are accepted with yes
  allnoconfig            - New config where all options are answered with no
  randpackageconfig      - New config with random answer to package options
  allyespackageconfig    - New config where pkg options are accepted with yes
  allnopackageconfig     - New config where package options are answered with no

Documentation:
  manual                 - build manual in HTML, split HTML, PDF and txt
  manual-html            - build manual in HTML
  manual-split-html      - build manual in split HTML
  manual-pdf             - build manual in PDF
  manual-txt             - build manual in txt
  manual-epub            - build manual in ePub

Miscellaneous:
  source                 - download all sources needed for offline-build
  source-check           - check selected packages for valid download URLs
  external-deps          - list external packages used
  legal-info             - generate info about license compliance

  make V=0|1             - 0 => quiet build (default), 1 => verbose build
  make O=dir             - Locate all output files in "dir", including .config

  arm_foundationv8_defconfig          - Build for arm_foundationv8
  armadeus_apf9328_defconfig          - Build for armadeus_apf9328
  at91rm9200df_defconfig              - Build for at91rm9200df
  at91sam9260dfc_defconfig            - Build for at91sam9260dfc
  at91sam9261ek_defconfig             - Build for at91sam9261ek
  at91sam9263ek_defconfig             - Build for at91sam9263ek
  at91sam9g20dfc_defconfig            - Build for at91sam9g20dfc
  atngw100_defconfig                  - Build for atngw100
  atstk100x_defconfig                 - Build for atstk100x
  beaglebone_defconfig                - Build for beaglebone
  calao_qil_a9260_defconfig           - Build for calao_qil_a9260
  calao_usb_a9263_defconfig           - Build for calao_usb_a9263
  calao_usb_a9g20_lpw_defconfig       - Build for calao_usb_a9g20_lpw
  ea3250_defconfig                    - Build for ea3250
  fdi3250_defconfig                   - Build for fdi3250
  integrator926_defconfig             - Build for integrator926
  kb9202_defconfig                    - Build for kb9202
  mini2440_defconfig                  - Build for mini2440
  mx53loco_defconfig                  - Build for mx53loco
  nitrogen6x_defconfig                - Build for nitrogen6x
  pandaboard_defconfig                - Build for pandaboard
  phy3250_defconfig                   - Build for phy3250
  qemu_arm_versatile_defconfig        - Build for qemu_arm_versatile
  qemu_arm_vexpress_defconfig         - Build for qemu_arm_vexpress
  qemu_microblazebe_mmu_defconfig     - Build for qemu_microblazebe_mmu
  qemu_microblazeel_mmu_defconfig     - Build for qemu_microblazeel_mmu
  qemu_mips64_malta_defconfig         - Build for qemu_mips64_malta
  qemu_mips_malta_defconfig           - Build for qemu_mips_malta
  qemu_mipsel_malta_defconfig         - Build for qemu_mipsel_malta
  qemu_ppc_g3beige_defconfig          - Build for qemu_ppc_g3beige
  qemu_ppc_mpc8544ds_defconfig        - Build for qemu_ppc_mpc8544ds
  qemu_sh4_r2d_defconfig              - Build for qemu_sh4_r2d
  qemu_sparc_ss10_defconfig           - Build for qemu_sparc_ss10
  qemu_x86_64_defconfig               - Build for qemu_x86_64
  qemu_x86_defconfig                  - Build for qemu_x86
  s6lx9_microboard_defconfig          - Build for s6lx9_microboard
  sheevaplug_defconfig                - Build for sheevaplug

See docs/README, or generate the Buildroot manual for further details
      </screen>
      看<emphasis>qemu_x86_defconfig</emphasis>，我们要的就是他：
      <screen>
<prompt>liunx@ubuntu:~/Work/Buildroot/work/buildroot-2012.11$ </prompt><userinput>make qemu_x86_defconfig</userinput>
mkdir -p /home/liunx/Work/Buildroot/work/buildroot-2012.11/output/build/buildroot-config/lxdialog
make CC="/usr/bin/gcc" HOSTCC="/usr/bin/gcc" obj=/home/liunx/Work/Buildroot/work/buildroot-2012.11
/output/build/buildroot-config -C support/kconfig -f Makefile.br conf
make[1]: 正在进入目录 `/home/liunx/Work/Buildroot/work/buildroot-2012.11/support/kconfig'
/usr/bin/gcc -DCURSES_LOC="&lt;ncurses.h&gt;" -DLOCALE  -I/home/liunx/Work/Buildroot/work/buildroot
-2012.11/output/build/buildroot-config  -MM *.c &gt; /home/liunx/Work/Buildroot/work/buildroot-2012
.11/output/build/buildroot-config/.depend 2&gt;/dev/null || :
make[1]:正在离开目录 `/home/liunx/Work/Buildroot/work/buildroot-2012.11/support/kconfig'
make[1]: 正在进入目录 `/home/liunx/Work/Buildroot/work/buildroot-2012.11/support/kconfig'
/usr/bin/gcc -DCURSES_LOC="&lt;ncurses.h&gt;" -DLOCALE  -I/home/liunx/Work/Buildroot/work/buildroot
-2012.11/output/build/buildroot-config   -c conf.c -o /home/liunx/Work/Buildroot/work/buildroot-201
2.11/output/build/buildroot-config/conf.o
/usr/bin/gcc -DCURSES_LOC="&lt;ncurses.h&gt;" -DLOCALE  -I/home/liunx/Work/Buildroot/work/buildroot
-2012.11/output/build/buildroot-config  -I. -c /home/liunx/Work/Buildroot/work/buildroot-2012.11/ou
tput/build/buildroot-config/zconf.tab.c -o /home/liunx/Work/Buildroot/work/buildroot-2012.11/output
/build/buildroot-config/zconf.tab.o
/usr/bin/gcc -DCURSES_LOC="&lt;ncurses.h&gt;" -DLOCALE  -I/home/liunx/Work/Buildroot/work/buildroot
-2012.11/output/build/buildroot-config   /home/liunx/Work/Buildroot/work/buildroot-2012.11/output/b
uild/buildroot-config/conf.o /home/liunx/Work/Buildroot/work/buildroot-2012.11/output/build/buildro
ot-config/zconf.tab.o  -o /home/liunx/Work/Buildroot/work/buildroot-2012.11/output/build/buildroot-
config/conf
rm /home/liunx/Work/Buildroot/work/buildroot-2012.11/output/build/buildroot-config/zconf.tab.c
make[1]:正在离开目录 `/home/liunx/Work/Buildroot/work/buildroot-2012.11/support/kconfig'
#
# configuration written to /home/liunx/Work/Buildroot/work/buildroot-2012.11/.config
#
      </screen>
      生成默认配置了，接下来我们要做一些定制了。首先定制一下<emphasis>toolchain</emphasis>，默认的工具链支持的功能较少，比如不支持<emphasis>C++</emphasis>，所以为了以后能编译更多的软件，我们尽量打开所有的功能，因为<emphasis>buildroot</emphasis>会自动编译工具链的，而这个编译又很费时间，所以我们最好是一次成型。
    <imageobject>
      <imagedata align="left" width="6in" format="PNG"
        fileref="../images/buildroot-toolchain.png"/>
    </imageobject>
    注意红色区域，这里是重点，当然一些杂七杂八的东西你也可以勾选，但要记住，“宁可错杀一千，不可放过一个”！接下来定制软件包，默认配置的软件包很少，这里我们要添加一些网络相关的软件包。进入<emphasis>Package Selectionfor the target</emphasis>，然后勾选<emphasis>Show package that are also provided by busbox</emphasis>，因为<emphasis>busybox</emphasis>的替代功能有限，还是用原装的好。进入<emphasis>Networking applications</emphasis>这里，我们根据需要选择一些应用程序即可。
    </para>
    <para>
      还有一个细节的地方需要修改，我们需要系统将信息输出到串口，这样方便使用，所以我们将
      <menuchoice>
        <guimenu>System configuration</guimenu>
        <guimenuitem>Port to run a getty (login prompt) on</guimenuitem>
      </menuchoice>
      的<emphasis>tty1</emphasis>改为<emphasis>ttyS0</emphasis>，这样我们可以充分利用<emphasis>qemu</emphasis>的<emphasis>-nographic</emphasis>选项，直接在终端里显示，而不产生麻烦的窗口界面了，毕竟我们的设备没有图像界面，使用窗口显示真是很麻烦的。
    </para>
    <para>
      最后，保存配置，退出，然后<command>make</command>，耐心等待吧，如果网络顺畅，电脑给力的话，一个小时内应该可以解决战斗的。<emphasis>buildroot</emphasis>会自动根据你的电脑CPU核心数来分配线程的，充分利用资源，其实花时间的地方源于下载代码，这里要看你的网络情况了。
    </para>
    <para>
      编译完成后，生成的镜像在<filename>output/images</filename>目录。
      <screen>
<prompt>liunx@ubuntu:~/Work/Buildroot/work/buildroot-2012.11$ </prompt><userinput>ls output/images/</userinput>
bzImage  rootfs.ext2
      </screen>
    </para>
  </section>
  <section>
    <title>补充信息</title>
    <section>
      <title>使用attitude_adjustment版本</title>
      <para>使用<emphasis>snapshots</emphasis>版本有时会很麻烦，那就是快照版本更新得太快了，一天一次，这个对于用户层的软件没有太大的问题，因为内核的接口是很稳定的，但是内核模块则会受到影响，我们下载当天的镜像，第二天再安装需要的内核模块时，我们会安装失败，这样又要下载新的镜像，重新配置了，很麻烦，所以可以选择<emphasis>attitude_adjustment</emphasis>版本，这个版本是最近的稳定版本，但请注意，不一定是最终版本，包含有<emphasis>beta</emphasis>版本和<emphasis>rc</emphasis>候选版本。</para>
    <imageobject>
      <imagedata align="left" width="6in" format="PNG"
        fileref="../images/attitude_adjustment.png"/>
    </imageobject>
    <para>这里我们选择<emphasis>12.09-rc1</emphasis>，最近的<emphasis>rc</emphasis>候选版本即可。</para>
    </section>
  </section>
</chapter>
